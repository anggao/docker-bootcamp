docker run -d --name db -p 3306 ubuntu:14.04 /bin/bash -c \
"while true;do sleep 30; echo 'I am a Database';done"

docker run -d --name web --link db:db -p 80 ubuntu:14.04 /bin/bash -c \
"while true;do sleep 30; echo 'I am a webserver';done"

### Note
+ `--link <name or id>:alias`
+ Where name is the name of the container weâ€™re linking to and alias is an alias for the link name. 

```bash
$ docker inspect -f "{{ .HostConfig.Links }}" web
[/db:/web/db]
```
You can see that the web container is now linked to the db container web/db. Which allows it to access information about the db container.

+ Docker exposes connectivity information for the source container to the recipient container in two ways:
 - Environment variables,
 - Updating the /etc/hosts file.

+ Docker uses this prefix format to define three distinct environment variables:
 - The `prefix_ADDR` variable contains the IP Address from the URL, for example `WEBDB_PORT_5432_TCP_ADDR=172.17.0.82`.
 - The `prefix_PORT` variable contains just the port number from the URL for example `WEBDB_PORT_5432_TCP_PORT=5432`.
 - The `prefix_PROTO` variable contains just the protocol from the URL for example `WEBDB_PORT_5432_TCP_PROTO=tcp`.
+ For example, if a container exposes 4 ports that Docker creates 12 environment variables, 3 for each port.

